<?php
    namespace {{ spec.namespace.spec }}\{{ table.name }};

    use Adbar\Dot;
    use Psr\Http\Message\ResponseInterface;
    use Psr\Http\Message\ServerRequestInterface;
    use Psr\Http\Server\MiddlewareInterface;
    use Psr\Http\Server\RequestHandlerInterface;

    use Enobrev\API\DataMap;
    use Enobrev\API\Exception;
    use Enobrev\API\FullSpec\Component\Reference;
    use Enobrev\API\HTTP;
    use Enobrev\API\Method;
    use Enobrev\API\Middleware\ResponseBuilder;
    use Enobrev\API\Spec;
    use Enobrev\API\SpecInterface;
    use Enobrev\ORM\Exceptions\DbDuplicateException;
    use Enobrev\ORM\Exceptions\DbException;

    use {{ spec.namespace.spec }}\_components;
    use {{ spec.namespace.table }};

    class {{ spec.name }} implements SpecInterface, MiddlewareInterface {
{% if primary|length == 1 %}
        private $mInsertKey;

{% endif %}
        public function spec(): Spec {
            return Spec::create()
                ->httpMethod        (Method\{{ spec.http_method }})
                ->path              ('{{ spec.path_prefix}}/{{ table.name }}[/]')
                ->summary           ('Save {{ table.name }}')
                ->description       ('Create or Update `{{ table.name }}` designated by {% for field in primary%}{% if loop.first %}{% elseif loop.last %} and {% else %}, {% endif %}`{{ field.short }}`{% endfor %} in POST body')
                ->scopes            ({{ spec.scopes|raw }})
                ->tag               ('{{ table.name }}')
{% if spec.show_post_in_body %}
                ->postBodyReference (Reference::create(_components\{{ table.name }}::REQUEST_POST_BODY_KEY))
{% endif %}
                ->response(HTTP\OK,      Reference::create(_components\{{ table.name }}::RESPONSE_SUCCESS))
                ->response(HTTP\CREATED, Reference::create(_components\{{ table.name }}::RESPONSE_SUCCESS));
        }

        /**
         * Middleware
         * Use the ServerRequestInterface to figure out what is needed
         * Either return a ResponseInterface (and stop processing other Middleware)
         *     or return a call to Handler::handle (and allow other Middleware to continue processing)
         * The ResponseBuilder data should match the Schema defined in spec();
         *
         * @param ServerRequestInterface  $oRequest
         * @param RequestHandlerInterface $oHandler
         *
         * @return ResponseInterface
         * @throws DbDuplicateException
         * @throws DbException
         */
        public function process(ServerRequestInterface $oRequest, RequestHandlerInterface $oHandler): ResponseInterface {
            $aPostParams    = $oRequest->getParsedBody();
            $oResponse      = ResponseBuilder::get($oRequest);
            $oResponse      = $this->getResponse($oResponse, $aPostParams);
            $oRequest       = ResponseBuilder::update($oRequest, $oResponse);

{% if primary|length == 1 %}
            ${{primary.0.var}} = $aPathParams['{{ primary.0.short }}'] ?? null;

            if (!$this->mInsertKey) {
                // Updated Record, carry on as usual
                return $oHandler->handle($oRequest);
            }

            if (!${{primary.0.var}}) {
                // Created Record and no Key was set by client
                return $oHandler->handle($oRequest)->withStatus(HTTP\CREATED)->withHeader('Location', '{{ spec.path_prefix}}/{{ table.name }}/' . $this->mInsertKey);
            }

            // Created record and key was provided by client
            return $oHandler->handle($oRequest)->withStatus(HTTP\CREATED);
{% else %}
            return $oHandler->handle($oRequest);
{% endif %}
        }

        /**
         * @param Dot        $oResponse    Response Object
         * @param array|null $aPostParams  Params from Request Body
         *
         * @return Dot
         *
         * @throws DbDuplicateException
         * @throws DbException
         */
        protected function getResponse(Dot $oResponse, ?array $aPostParams): Dot {
            $o{{ table.title }} = null;
            if (isset({% for field in primary %}$aPostParams['{{ field.short }}']{% if not loop.last %}, {% endif %}{% endfor %})) {
                $o{{ table.title }} = {{ table.class }}::getById({% for field in primary %}$aPostParams['{{ field.short }}']{% if not loop.last %}, {% endif %}{% endfor %});
            }

            if ($o{{ table.title }} instanceof {{ table.class }} === false) {
                /** @var {{ table.class }} $o{{ table.title }} */
                $o{{ table.title }} = DataMap::applyPostParamsToTable(new {{ table.class }}, $aPostParams);
                $o{{ table.title }}->insert();
{% if primary|length == 1 %}
                $this->mInsertKey = $o{{ table.title }}->{{ primary.0.name }}->getValue();
{% endif %}

            } else {
                $o{{ table.title }} = DataMap::applyPostParamsToTable($o{{ table.title }}, $aPostParams);
                $o{{ table.title }}->update();
            }

            return _components\{{ table.name }}::add{{ table.title }}ToResponse($oResponse, $o{{ table.title }});
        }
    }

// generated from template_spec_post_body_key.twig