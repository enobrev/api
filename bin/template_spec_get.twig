<?php
    namespace {{ spec.namespace.spec }}\{{ table.name }};

    use Adbar\Dot;
    use Psr\Http\Message\ResponseInterface;
    use Psr\Http\Message\ServerRequestInterface;
    use Psr\Http\Server\MiddlewareInterface;
    use Psr\Http\Server\RequestHandlerInterface;

    use Enobrev\API\DataMap;
    use Enobrev\API\FullSpec\Component\Reference;
    use Enobrev\API\HTTP;
    use Enobrev\API\Method;
    use Enobrev\API\Middleware\FastRoute;
    use Enobrev\API\Middleware\ResponseBuilder;
    use Enobrev\API\Param;
    use Enobrev\API\Spec;
    use Enobrev\API\SpecInterface;

    use {{ spec.namespace.table }};

    class {{ spec.name }} implements SpecInterface, MiddlewareInterface {
        public function spec(): Spec {
            return Spec::create()
                ->httpMethod      (Method\{{ spec.http_method }})
                ->path            ('{{ spec.path_prefix}}/{{ table.name }}/{% for field in primary %}{{ '{' }}{{ field.short }}{{ '}' }}{% if not loop.last %}-{% endif %}{% endfor %}')
                ->summary         ('Get {{ table.name }}')
{% if primary|length > 1 %}
                ->description     ('Get `{{ table.name }}` designated by {% for field in primary%}{% if loop.first %}{% elseif loop.last %} and {% else %}, {% endif %}`{{ field.short }}`{% endfor %}')
{% else %}
                ->description     ('Get `{{ table.name }}` designated by comma separated list of `{{ primary.0.short }}`')
{% endif %}
                ->scopes          ({{ spec.scopes|raw }})
                ->tag             ('{{ table.name }}')
                ->pathParams      ([
{% if primary|length > 1 %}
{% for field in primary %}
                    '{{ field.short }}'{{ field.short_pad }}=> Param\{{ field.param_class }}::create()->required(){% if not loop.last %},{% endif %}

{% endfor %}
{% else %}
{% for field in primary %}
                    '{{ field.short }}' => Param\_Array::create()->items(new Param\{{ field.param_class }})->required()
{% endfor %}
{% endif %}
                ])
                ->response(HTTP\OK,        Reference::create(components::RESPONSE_SUCCESS))
                ->response(HTTP\NOT_FOUND, Spec\ProcessErrorResponse::createFromException(new {{ table.title }}NotFoundException));
        }

        /**
         * Middleware
         * Use the ServerRequestInterface to figure out what is needed
         * Either return a ResponseInterface (and stop processing other Middleware)
         *     or return a call to Handler::handle (and allow other Middleware to continue processing)
         * The ResponseBuilder data should match the Schema defined in spec();

         * @param ServerRequestInterface $oRequest
         * @param RequestHandlerInterface $oHandler
         * @return ResponseInterface
         */
        public function process(ServerRequestInterface $oRequest, RequestHandlerInterface $oHandler): ResponseInterface {
            return $oHandler->handle(
                ResponseBuilder::update($oRequest,
                    $this->getResponse(
                        FastRoute::getPathParams($oRequest),
                        $oRequest->getQueryParams(),
                        $oRequest->getParsedBody(),
                        ResponseBuilder::get($oRequest)
                    )
                )
            );
        }

        /**
         * @param array|null $aPathParams   Params from Request Path
         * @param array|null $aQueryParams  Params from Request Query
         * @param array|null $aPostParams   Params from Request Body
         * @param Dot $oResponse            Response Object
         * @return Dot
         * @throws {{ table.title }}NotFoundException
         */
        protected function getResponse(?array $aPathParams, ?array $aQueryParams, ?array $aPostParams, Dot $oResponse): Dot {
{% if primary|length > 1 %}
            $o{{ table.title }} = {{ table.class }}::getById({% for field in primary %}$aPathParams['{{ field.short }}']{% if not loop.last %}, {% endif %}{% endfor %});

            if ($o{{ table.title }} instanceof {{ table.class }} === false) {
                throw new {{ table.title }}NotFoundException;
            }

            $oResponse->set("{{ table.name }}.{% for field in primary %}{{ '{' }}$o{{ table.title }}->{{ field.name }}->getValue(){{ '}' }}{% if not loop.last %}-{% endif %}{% endfor %}", DataMap::convertTableToResponseArray($o{{ table.title }}));
{% else %}
            $a{{ table.plural }} = {{ table.class_plural }}::getBy{{ primary.0.plural }}({% for field in primary %}$aPathParams['{{ field.short }}']{% if not loop.last %}, {% endif %}{% endfor %});

            if (!count($a{{ table.plural }})) {
                throw new {{ table.title }}NotFoundException;
            }

            foreach($a{{ table.plural }} as $o{{ table.title }}) {
                $oResponse->set("{{ table.name }}.{$o{{ table.title }}->{{ primary.0.name }}->getValue()}", DataMap::convertTableToResponseArray($o{{ table.title }}));
            }
{% endif %}

            return $oResponse;
        }
    }