<?php
    namespace {{ spec.namespace.spec }}\{{ table.name }};

    use Adbar\Dot;
    use Psr\Http\Message\ResponseInterface;
    use Psr\Http\Message\ServerRequestInterface;
    use Psr\Http\Server\MiddlewareInterface;
    use Psr\Http\Server\RequestHandlerInterface;

    use Enobrev\API\DataMap;
    use Enobrev\API\Exception;
    use Enobrev\API\FullSpec\Component\Reference;
    use Enobrev\API\HTTP;
    use Enobrev\API\Method;
    use Enobrev\API\Middleware\FastRoute;
    use Enobrev\API\Middleware\ResponseBuilder;
    use Enobrev\API\Param;
    use Enobrev\API\Spec;
    use Enobrev\API\SpecInterface;
    use Enobrev\ORM\Exceptions\DbDuplicateException;
    use Enobrev\ORM\Exceptions\DbException;

    use {{ spec.namespace.spec }}\_components;
    use {{ spec.namespace.table }};

    class {{ spec.name }} implements SpecInterface, MiddlewareInterface {
        public function spec(): Spec {
            return Spec::create()
                ->httpMethod        (Method\{{ spec.http_method }})
                ->path              ('{{ spec.path_prefix}}/{{ table.name }}/{% for field in primary %}{{ '{' }}{{ field.short }}{{ '}' }}{% if not loop.last %}-{% endif %}{% endfor %}')
                ->summary           ('Save {{ table.name }} by Id')
                ->description       ('Create or Update `{{ table.name }}` designated by {% for field in primary%}{% if loop.first %}{% elseif loop.last %} and {% else %}, {% endif %}`{{ field.short }}`{% endfor %}')
                ->scopes            ({{ spec.scopes|raw }})
                ->tag               ('{{ table.name }}')
{% if spec.show_post %}
                ->postBodyReference (Reference::create(_components\{{ table.name }}::REQUEST_POST))
{% endif %}
                ->pathParams        ([
{% for field in primary %}
                    '{{ field.short }}'{{ field.short_pad }}=> Param\{{ field.param_class }}::create()->required(){% if not loop.last %},{% endif %}

{% endfor %}
                ])
                ->response(HTTP\OK, Reference::create(_components\{{ table.name }}::RESPONSE_SUCCESS));
        }

        /**
         * Middleware
         * Use the ServerRequestInterface to figure out what is needed
         * Either return a ResponseInterface (and stop processing other Middleware)
         *     or return a call to Handler::handle (and allow other Middleware to continue processing)
         * The ResponseBuilder data should match the Schema defined in spec();
         *
         * @param ServerRequestInterface  $oRequest
         * @param RequestHandlerInterface $oHandler
         *
         * @return ResponseInterface
         * @throws DbDuplicateException
         * @throws DbException
         */
        public function process(ServerRequestInterface $oRequest, RequestHandlerInterface $oHandler): ResponseInterface {
            $aPostParams = $oRequest->getParsedBody();
            $aPathParams = FastRoute::getPathParams($oRequest);
{% for field in primary %}
            ${{field.var}} = $aPathParams['{{ field.short }}'];
{% endfor %}

            $oResponse   = ResponseBuilder::get($oRequest);
            $oResponse   = $this->getResponse($oResponse, {% for field in primary %}${{field.var}}, {% endfor %}$aPostParams);
            $oRequest    = ResponseBuilder::update($oRequest, $oResponse);

            return $oHandler->handle($oRequest);
        }

        /**
         * @param Dot $oResponse Response Object
{% for field in primary %}
         * @param {{field.php_type}} ${{field.var}}
{% endfor %}
         * @param array|null $aPostParams Params from Request Body
         *
         * @return Dot
         *
         * @throws DbDuplicateException
         * @throws DbException
         */
        protected function getResponse(Dot $oResponse, {% for field in primary %}{{field.php_type}} ${{field.var}}, {% endfor %}?array $aPostParams): Dot {
            $o{{ table.title }} = {{ table.class }}::getById({% for field in primary %}${{field.var}}{% if not loop.last %}, {% endif %}{% endfor %});
            if ($o{{ table.title }} instanceof {{ table.class }} === false) {
                /** @var {{ table.class }} $o{{ table.title }} */
                $o{{ table.title }} = DataMap::applyPostParamsToTable(new {{ table.class }}, $aPostParams);
{% for field in primary %}
                $o{{ table.title }}->{{ field.name }}->setValue(${{field.var}});
{% endfor %}
                $o{{ table.title }}->insert();
            } else {
                $o{{ table.title }} = DataMap::applyPostParamsToTable($o{{ table.title }}, $aPostParams);
                $o{{ table.title }}->update();
            }

            $oResponse = _components\{{ table.name }}::add{{ table.title }}ToResponse($oResponse, $o{{ table.title }});
            return $oResponse;
        }
    }

// generated from template_spec_post.twig