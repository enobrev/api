<?php
    namespace {{ spec.namespace.spec }}\{{ table.name }};

    use Psr\Http\Message\ResponseInterface;
    use Psr\Http\Message\ServerRequestInterface;
    use Psr\Http\Server\MiddlewareInterface;
    use Psr\Http\Server\RequestHandlerInterface;

    use Enobrev\API\Method;
    use Enobrev\API\Param;
    use Enobrev\API\Spec;
    use Enobrev\API\SpecInterface;

    use {{ spec.namespace.table }};

    class {{ spec.name }} implements SpecInterface, MiddlewareInterface {
        public function spec(): Spec {
            $oSpec = new Spec();
            $oSpec->HttpMethod        = Method\{{ spec.http_method }};
            $oSpec->Path              = '{{ spec.path_prefix}}/{{ table.name }}/{% for field in primary %}{{ '{' }}{{ field.short }}{{ '}' }}{% if not loop.last %}-{% endif %}{% endfor %}';
            $oSpec->Summary           = 'Create or Update `{{ table.name }}`';
            $oSpec->Description       = 'Create or Update `{{ table.name }}` designated by {% for field in primary%}{% if loop.first %}{% elseif loop.last %} and {% else %}, {% endif %}`{{ field.short }}`{% endfor %}';
            $oSpec->Scopes            = {{ spec.scopes|raw }};
            $oSpec->QueryParams       = Spec::tableToParams(new {{ table.class }}, Spec::SKIP_PRIMARY);

{% for field in primary %}
            $oSpec->PathParams['{{ field.short }}'] = new Param\{{ field.param_class }}('{{ field.short }}', Param::REQUIRED);
{% endfor %}

            $oSpec->ResponseSchema    = [
                'type' => 'object',
                'properties' => [
                    'places' => [
                        'type' => 'object',
                        'properties' => [
                            '{% for field in primary %}{{ '{' }}{{ field.short }}{{ '}' }}{% if not loop.last %}-{% endif %}{% endfor %}' => [
                                'type' => 'object',
                                'properties' => Spec::tableToParams(new {{ table.class }})
                            ]
                        ]
                    ]
                ]
            ];

            return $oSpec;
        }

        public function process(ServerRequestInterface $oRequest, RequestHandlerInterface $oHandler): ResponseInterface {
            $o{{ table.title }} = {{ table.class }}::getById({% for field in primary %}$oRequest->getAttribute('{{ field.short }}'){% if not loop.last %}, {% endif %}{% endfor %});
            if ($o{{ table.title }} instanceof {{ table.class }} === false) {
                $o{{ table.title }} = new {{ table.class }};
{% for field in primary %}
                $o{{ table.title }}->{{ field.name }}->setValue($oRequest->getAttribute('{{ field.short }}'));
{% endfor %}
                $o{{ table.title }}->setFromArray($oRequest->getQueryParams());
                $o{{ table.title }}->insert();
            } else {
                $o{{ table.title }}->setFromArray($oRequest->getQueryParams());
                $o{{ table.title }}->update();
            }

            return (new get())->process($oRequest, $oHandler);
        }
    }