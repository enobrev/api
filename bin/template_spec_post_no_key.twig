<?php
    namespace {{ spec.namespace.spec }}\{{ table.name }};

    use Adbar\Dot;
    use Psr\Http\Message\ResponseInterface;
    use Psr\Http\Message\ServerRequestInterface;
    use Psr\Http\Server\MiddlewareInterface;
    use Psr\Http\Server\RequestHandlerInterface;

    use Enobrev\API\DataMap;
    use Enobrev\ORM\Exceptions\DbException;
    use Enobrev\API\FullSpec\Component\Reference;
    use Enobrev\API\HTTP;
    use Enobrev\API\Method;
    use Enobrev\API\Middleware\ResponseBuilder;
    use Enobrev\API\Spec;
    use Enobrev\API\SpecInterface;

    use {{ spec.namespace.spec }}\_components;
    use {{ spec.namespace.table }};

    class {{ spec.name }} implements SpecInterface, MiddlewareInterface {
        public function spec(): Spec {
            return Spec::create()
                ->httpMethod        (Method\{{ spec.http_method }})
                ->path              ('{{ spec.path_prefix}}/{{ table.name }}[/]')
                ->summary           ('Add {{ table.name }}')
                ->description       ('Create `{{ table.name }}`.  This table has no primary key so this endpoint does not allow updates')
                ->scopes            ({{ spec.scopes|raw }})
                ->tag               ('{{ table.name }}')
{% if spec.show_post %}
                ->postBodyReference (Reference::create(_components\{{ table.name }}::REQUEST_POST))
{% endif %}
                ->response(HTTP\OK, Reference::create(_components\{{ table.name }}::RESPONSE_SUCCESS));
        }

        /**
         * @param ServerRequestInterface  $oRequest
         * @param RequestHandlerInterface $oHandler
         *
         * @return ResponseInterface
         * @throws DbDuplicateException
         * @throws DbException
         */
        public function process(ServerRequestInterface $oRequest, RequestHandlerInterface $oHandler): ResponseInterface {
            $aPostParams    = $oRequest->getParsedBody();
            $oResponse      = ResponseBuilder::get($oRequest);
            $oResponse      = $this->getResponse($oResponse, $aPostParams);
            $oRequest       = ResponseBuilder::update($oRequest, $oResponse);

            return $oHandler->handle($oRequest);
        }

        /**
         * @param Dot        $oResponse    Response Object
         * @param array|null $aPostParams  Params from Request Body
         *
         * @return Dot
         *
         * @throws DbDuplicateException
         * @throws DbException
         */
        protected function getResponse(Dot $oResponse, ?array $aPostParams): Dot {
            /** @var {{ table.class }} $o{{ table.title }} */
            $o{{ table.title }} = DataMap::applyPostParamsToTable(new {{ table.class }}, $aPostParams);
            $o{{ table.title }}->insert();

            $oResponse = _components\{{ table.name }}::add{{ table.title }}ToResponse($oResponse, $o{{ table.title }});
            return $oResponse;
        }
    }

// generated from template_spec_post_no_key.twig