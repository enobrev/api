<?php
    namespace {{ spec.namespace.spec }}\{{ table.name }};

    use Psr\Http\Message\ResponseInterface;
    use Psr\Http\Message\ServerRequestInterface;
    use Psr\Http\Server\MiddlewareInterface;
    use Psr\Http\Server\RequestHandlerInterface;

    use Enobrev\ORM\Exceptions\DbException;
    use Enobrev\API\HTTP;
    use Enobrev\API\Method;
    use Enobrev\API\Middleware\FastRoute;
    use Enobrev\API\Param;
    use Enobrev\API\Spec;
    use Enobrev\API\SpecInterface;

    use {{ spec.namespace.spec }}\_exceptions;
    use {{ spec.namespace.table }};

    class {{ spec.name }} implements SpecInterface, MiddlewareInterface {
        public function spec(): Spec {
            return Spec::create()
                ->httpMethod      (Method\{{ spec.http_method }})
                ->path            ('{{ spec.path_prefix}}/{{ table.name }}/{% for field in primary %}{{ '{' }}{{ field.short }}{{ '}' }}{% if not loop.last %}-{% endif %}{% endfor %}')
                ->summary         ('Delete {{ table.name }}')
                ->description     ('Delete `{{ table.name }}` designated by {% for field in primary%}{% if loop.first %}{% elseif loop.last %} and {% else %}, {% endif %}`{{ field.short }}`{% endfor %}')
                ->scopes          ({{ spec.scopes|raw }})
                ->tag             ('{{ table.name }}')
                ->pathParams      ([
{% for field in primary %}
                    '{{ field.short }}'{{ field.short_pad }}=> Param\{{ field.param_class }}::create()->required(){% if not loop.last %},{% endif %}

{% endfor %}
                ])
                ->response(HTTP\OK)
                ->response(HTTP\NOT_FOUND, Spec\ProcessErrorResponse::createFromException(new _exceptions\{{ table.title }}NotFound));
        }

        /**
         * @param ServerRequestInterface $oRequest
         * @param RequestHandlerInterface $oHandler
         *
         * @return ResponseInterface
         *
         * @throws DbException
         * @throws _exceptions\{{ table.title }}NotFound
         */
        public function process(ServerRequestInterface $oRequest, RequestHandlerInterface $oHandler): ResponseInterface {
            $aPathParams = FastRoute::getPathParams($oRequest);
{% for field in primary %}
            ${{field.var}} = $aPathParams['{{ field.short }}'];
{% endfor %}

            $oResponse   = $oHandler->handle($oRequest);

            $o{{ table.title }} = {{ table.class }}::getById({% for field in primary %}${{field.var}}{% if not loop.last %}, {% endif %}{% endfor %});
            if ($o{{ table.title }} instanceof {{ table.class }} === false) {
                throw new _exceptions\{{ table.title }}NotFound;
            }

            $o{{ table.title }}->delete();
            return $oResponse->withStatus(HTTP\OK);
        }
    }

// generated from template_spec_delete.twig