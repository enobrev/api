<?php
    namespace {{ spec.namespace.spec }}\{{ table.name }};

    use Adbar\Dot;
    use Psr\Http\Message\ResponseInterface;
    use Psr\Http\Message\ServerRequestInterface;
    use Psr\Http\Server\MiddlewareInterface;
    use Psr\Http\Server\RequestHandlerInterface;

    use Enobrev\API\DataMap;
    use Enobrev\API\Method;
    use Enobrev\API\Middleware\ResponseBuilder;
    use Enobrev\API\Param;
    use Enobrev\API\Spec;
    use Enobrev\API\SpecInterface;

    use {{ spec.namespace.table }};

    class {{ spec.name }} implements SpecInterface, MiddlewareInterface {
        public function spec(): Spec {
            $oSpec = new Spec();
            $oSpec->HttpMethod              = Method\{{ spec.http_method }};
            $oSpec->Path                    = '{{ spec.path_prefix}}/{{ table.name }}';
            $oSpec->Summary                 = 'List `{{ table.name }}`';
            $oSpec->Description             = 'Get listing of `{{ table.name }}`';
            $oSpec->Scopes                  = {{ spec.scopes|raw }};

{% set unreferenced_fields = [] %}
{% for field in fields %}
{% if not field.reference and not field.primary %}
{% set unreferenced_fields = unreferenced_fields|merge([field]) %}
{% endif %}
{% endfor %}
            $oSpec->QueryParams['page']     = new Param\_Integer('page',   0, ['default' => 1],    "Current Page of `{{ table.name }}`");
            $oSpec->QueryParams['per']      = new Param\_Integer('per',    0, ['default' => 100],  "Number of `{{ table.name }}` per page of Data");
            $oSpec->QueryParams['search']   = new Param\_String( 'search', 0, ['default' => null], "Search term.  Can be a plain string or in the format field:value");
            $oSpec->QueryParams['sort']     = new Param\_String( 'sort',   0, ['default' => null], "`{{ table.name }}` field to sort by");
{% if has_date %}
            $oSpec->QueryParams['sync']     = new Param\_String( 'sync',   0, ['default' => null], "Get only `{{ table.name }}` with an updated date since the date in `sync`");
{% endif %}

            $oSpec->ResponseSchema          = [
                'type' => 'object',
                'properties' => [
                    '{{ table.name }}' => [
                        'type' => 'object',
                        'properties' => [
                            '{% for field in primary %}{{ '{' }}{{ field.short }}{{ '}' }}{% if not loop.last %}-{% endif %}{% endfor %}' => [
                                'type' => 'object',
                                'properties' => Spec::tableToParams(new {{ table.class }})
                            ]
                        ]
                    ]
                ]
            ];

            return $oSpec;
        }

        /**
         * Middleware
         * Use the ServerRequestInterface to figure out what is needed
         * Either return a ResponseInterface (and stop processing other Middleware)
         *     or return a call to Handler::handle (and allow other Middleware to continue processing)
         * The ResponseBuilder data should match the Schema defined in spec();

         * @param ServerRequestInterface $oRequest
         * @param RequestHandlerInterface $oHandler
         * @return ResponseInterface
         */
        public function process(ServerRequestInterface $oRequest, RequestHandlerInterface $oHandler): ResponseInterface {
            $aQueryParams = $oRequest->getQueryParams();
            $oBuilder     = ResponseBuilder::get($oRequest);

            /** @var {{ table.class }}[] $a{{ table.plural }} */
            $oBaseTable = new {{ table.class }};
            $a{{ table.plural }} = {{ table.class_plural }}::getForCMS(
                $aQueryParams['page'],
                $aQueryParams['per'],
                DataMap::convertSearchTablesToORMTables($oBaseTable, $aQueryParams['search']),
                DataMap::convertSortTablesToORMTables($oBaseTable, $aQueryParams['sort']){% if has_date %},
                $aQueryParams['sync']
{% endif %}
            );

            foreach($a{{ table.plural }} as $o{{ table.title }}) {
{% if primary|length > 1 %}
                $oBuilder->set("{{ table.name }}.{% for field in primary %}{{ '{' }}$o{{ table.title }}->{{ field.name }}->getValue(){{ '}' }}{% if not loop.last %}-{% endif %}{% endfor %}", DataMap::convertTableToResponseArray($o{{ table.title }}));
{% else %}
                $oBuilder->set("{{ table.name }}.{$o{{ table.title }}->{{ primary.0.name }}->getValue()}", DataMap::convertTableToResponseArray($o{{ table.title }}));
{% endif %}
            }

            return $oHandler->handle(ResponseBuilder::update($oRequest, $oBuilder));
        }
    }