<?php
    namespace {{ spec.namespace.spec }}\_components;

    use Adbar\Dot;

    use Enobrev\API\DataMap;
    use Enobrev\API\Exception;
    use Enobrev\API\FullSpec;
    use Enobrev\API\FullSpec\ComponentListInterface;
    use Enobrev\API\FullSpec\Component\Reference;
    use Enobrev\API\FullSpec\Component\Request;
    use Enobrev\API\FullSpec\Component\Response;
    use Enobrev\API\FullSpec\Component\ParamSchema;
    use Enobrev\API\Param;
    use Enobrev\API\Spec;

    use {{ spec.namespace.table }};

    class {{ table.name }} implements ComponentListInterface {
{% if spec.show_post %}
        public const SCHEMA_POST           = ParamSchema::PREFIX . '/generated-{{ table.name }}-post';
{% endif %}
{% if spec.show_post_in_body %}
        public const SCHEMA_POST_IN_BODY   = ParamSchema::PREFIX . '/generated-{{ table.name }}-post-body_key';
{% endif %}
{% if spec.show_post %}
        public const REQUEST_POST          = Request::PREFIX     . '/generated-{{ table.name }}';
{% endif %}
{% if spec.show_post_in_body %}
        public const REQUEST_POST_BODY_KEY = Request::PREFIX     . '/generated-{{ table.name }}-body_key';
{% endif %}
        public const RESPONSE_SUCCESS      = Response::PREFIX    . '/generated-{{ table.name }}';

        /**
         * @return ComponentListInterface[]
         * @throws Exception\InvalidDataMapPath
         * @throws Exception\MissingDataMapDefinition
         */
        public function components(): array {
            return [
{% if spec.show_post %}
                ParamSchema::create(self::SCHEMA_POST)->param(Spec::tableToParam(new {{ table.class }}, {{ spec.non_post|raw }})),
{% endif %}
{% if spec.show_post_in_body %}
                ParamSchema::create(self::SCHEMA_POST_IN_BODY)->param(Spec::tableToParam(new {{ table.class }}, {{ spec.non_post_in_body|raw }})),
{% endif %}
{% if spec.show_post %}
                Request::create(self::REQUEST_POST)
                    ->description('`{{ table.name }}` Request')
                    ->post(Reference::create(self::SCHEMA_POST))
                    ->json(Reference::create(self::SCHEMA_POST)),

{% endif %}
{% if spec.show_post_in_body %}
                Request::create(self::REQUEST_POST_BODY_KEY)
                    ->description('`{{ table.name }}` Request')
                    ->post(Reference::create(self::SCHEMA_POST_IN_BODY))
                    ->json(Reference::create(self::SCHEMA_POST_IN_BODY)),

{% endif %}
                Response::create(self::RESPONSE_SUCCESS)
                    ->description('Successful `{{ table.name }}` Response')
                    ->json(
                        Spec\JsonResponse::allOf([
                            Reference::create(FullSpec::SCHEMA_DEFAULT),
                            [
                                'counts.{{ table.name }}' => Param\_Integer::create(),
                                'sorts.{{ table.name }}'  => Param\_Array::create()->items(new Param\_String()),
                                '{{ table.name }}.{% for field in primary %}{{ '{' }}{{ field.short }}{{ '}' }}{% if not loop.last %}-{% endif %}{% endfor %}' => Spec::tableToJsonSchema(new {{ table.class }}, Param::REQUIRED)
                            ]
                        ])
                    )
            ];
        }

        /**
         * @param Dot $oResponse
         * @param {{ table.class }} $o{{ table.title }}
         *
         * @return Dot
         * @throws Exception\InvalidDataMapPath
         * @throws Exception\MissingDataMapDefinition
         */
        public static function add{{ table.title }}ToResponse(Dot $oResponse, {{ table.class }} $o{{ table.title }}): Dot {
{% if primary|length > 1 %}
            $oResponse->set("{{ table.name }}.{% for field in primary %}{{ '{' }}$o{{ table.title }}->{{ field.name }}->getValue(){{ '}' }}{% if not loop.last %}-{% endif %}{% endfor %}", DataMap::convertTableToResponseArray($o{{ table.title }}));
{% else %}
            $oResponse->set("{{ table.name }}.{$o{{ table.title }}->{{ primary.0.name }}->getValue()}", DataMap::convertTableToResponseArray($o{{ table.title }}));
{% endif %}
            return $oResponse;
        }

        /**
         * @param Dot           $oResponse
         * @param {{ table.class_plural }} $o{{ table.plural }}
         *
         * @return Dot
         * @throws Exception\InvalidDataMapPath
         * @throws Exception\MissingDataMapDefinition
         */
        public static function add{{ table.plural }}ToResponse(Dot $oResponse, {{ table.class_plural }} $o{{ table.plural }}): Dot {
            foreach($o{{ table.plural }} as $o{{ table.title }}) {
                $oResponse = self::add{{ table.title }}ToResponse($oResponse, $o{{ table.title }});
            }
            return $oResponse;
        }
    }