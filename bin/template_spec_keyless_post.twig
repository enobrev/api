<?php
    namespace {{ spec.namespace.spec }}\{{ table.name }};

    use Adbar\Dot;
    use Psr\Http\Message\ResponseInterface;
    use Psr\Http\Message\ServerRequestInterface;
    use Psr\Http\Server\MiddlewareInterface;
    use Psr\Http\Server\RequestHandlerInterface;

    use Enobrev\API\FullSpec\Component\Reference;
    use Enobrev\API\HTTP;
    use Enobrev\API\Method;
    use Enobrev\API\Middleware\FastRoute;
    use Enobrev\API\Middleware\ResponseBuilder;
    use Enobrev\API\Spec;
    use Enobrev\API\SpecInterface;

    use {{ spec.namespace.table }};

    class {{ spec.name }} implements SpecInterface, MiddlewareInterface {
        public function spec(): Spec {
            return Spec::create()
                ->httpMethod        (Method\{{ spec.http_method }})
                ->path              ('{{ spec.path_prefix}}/{{ table.name }}[/]')
                ->summary           ('Save {{ table.name }}')
                ->description       ('Create or Update `{{ table.name }}` designated by {% for field in primary%}{% if loop.first %}{% elseif loop.last %} and {% else %}, {% endif %}`{{ field.short }}`{% endfor %} in POST body')
                ->scopes            ({{ spec.scopes|raw }})
                ->tag               ('{{ table.name }}')
{% if spec.show_keyless_post %}
                ->postBodyReference (Reference::create(components::REQUEST_KEYLESS_POST))
{% endif %}
                ->response(HTTP\OK,      Reference::create(components::RESPONSE_SUCCESS))
                ->response(HTTP\CREATED, Reference::create(components::RESPONSE_SUCCESS));
        }

{% if primary|length == 1 %}
        private $mInsertKey;
{% endif %}

        /**
         * @param array|null $aPathParams   Params from Request Path
         * @param array|null $aQueryParams  Params from Request Query
         * @param array|null $aPostParams   Params from Request Body
         * @param Dot $oResponse            Response Object
         * @return Dot
         */
        protected function getResponse(?array $aPathParams, ?array $aQueryParams, ?array $aPostParams, Dot $oResponse): Dot {
            $o{{ table.title }} = {{ table.class }}::getById({% for field in primary %}$aPathParams['{{ field.short }}']{% if not loop.last %}, {% endif %}{% endfor %});
            if ($o{{ table.title }} instanceof {{ table.class }} === false) {
                $o{{ table.title }} = new {{ table.class }};
{% for field in primary %}
                $o{{ table.title }}->{{ field.name }}->setValue($aPathParams['{{ field.short }}']);
{% endfor %}
                $o{{ table.title }}->setFromArray($aPostParams);
                $o{{ table.title }}->insert();
{% if primary|length == 1 %}
                $this->mInsertKey = $o{{ table.title }}->{{ primary.0.name }}->getValue();
{% endif %}
            } else {
                $o{{ table.title }}->setFromArray($aPostParams);
                $o{{ table.title }}->update();
            }

            return $oResponse;
        }

        /**
         * Middleware
         * Use the ServerRequestInterface to figure out what is needed
         * Either return a ResponseInterface (and stop processing other Middleware)
         *     or return a call to Handler::handle (and allow other Middleware to continue processing)
         * The ResponseBuilder data should match the Schema defined in spec();

         * @param ServerRequestInterface $oRequest
         * @param RequestHandlerInterface $oHandler
         * @return ResponseInterface
         */
        public function process(ServerRequestInterface $oRequest, RequestHandlerInterface $oHandler): ResponseInterface {
            $aPostParams = $oRequest->getParsedBody();
            $oRequest    = ResponseBuilder::update($oRequest,
                $this->getResponse(
                    FastRoute::getPathParams($oRequest),
                    $oRequest->getQueryParams(),
                    $aPostParams,
                    ResponseBuilder::get($oRequest)
                )
            );

{% if primary|length > 1 %}
            return (new get())->process($oRequest, $oHandler);
{% else %}
            if (!$this->mInsertKey) {
                // Updated Record, carry on as usual
                return (new get())->process($oRequest, $oHandler);
            }

            if (!isset($aPostParams['{{ primary.0.name }}'])) {
                // Created Record and no Key was set by client
                $oRequest  = $oRequest->withHeader('Location', '{{ spec.path_prefix}}/{{ table.name }}/' . $this->mInsertKey);
            }

            // Created record and key was provided by client
            return (new get())->process($oRequest, $oHandler)->withStatus(HTTP\CREATED);
{% endif %}
        }
    }